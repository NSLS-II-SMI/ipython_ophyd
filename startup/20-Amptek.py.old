print(f'Loading {__file__}')

from ophyd.mca import (EpicsMCA)
from ophyd import (Component as Cpt, Device, EpicsSignal, EpicsSignalRO,
                   EpicsSignalWithRBV, DeviceStatus)
from ophyd.device import (BlueskyInterface, Staged)



class AmptekMCA(EpicsMCA):
    # TODO: fix upstream
    preset_real_time = Cpt(EpicsSignal, '.PRTM')
    preset_live_time = Cpt(EpicsSignal, '.PLTM')
    elapsed_real_time = Cpt(EpicsSignalRO, '.ERTM')
    elapsed_live_time = Cpt(EpicsSignalRO, '.ELTM')

    check_acquiring = Cpt(EpicsSignal, 'CheckACQG')
    client_wait = Cpt(EpicsSignal, 'ClientWait')
    collect_data = Cpt(EpicsSignal, 'CollectData')
    enable_wait = Cpt(EpicsSignal, 'EnableWait')
    erase = Cpt(EpicsSignal, 'Erase')
    erase_start = Cpt(EpicsSignal, 'EraseStart')
    read_signal = Cpt(EpicsSignal, 'Read')
    read_callback = Cpt(EpicsSignal, 'ReadCallback')
    read_data_once = Cpt(EpicsSignal, 'ReadDataOnce')
    read_status_once = Cpt(EpicsSignal, 'ReadStatusOnce')
    set_client_wait = Cpt(EpicsSignal, 'SetClientWait')
    start = Cpt(EpicsSignal, 'Start')
    status = Cpt(EpicsSignal, 'Status')
    stop_signal = Cpt(EpicsSignal, 'Stop')
    when_acq_stops = Cpt(EpicsSignal, 'WhenAcqStops')
    why1 = Cpt(EpicsSignal, 'Why1')
    why2 = Cpt(EpicsSignal, 'Why2')
    why3 = Cpt(EpicsSignal, 'Why3')
    why4 = Cpt(EpicsSignal, 'Why4')

class Amptek(Device):
    mca = Cpt(AmptekMCA, 'mca1')

    dwell = Cpt(EpicsSignal, 'Dwell')
    

class AmptekSoftTrigger(BlueskyInterface):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._status = None
        self._acquisition_signal = self.mca.erase_start

        self.stage_sigs[self.mca.stop_signal] = 1
        
        self._count_signal = self.mca.preset_real_time
        self._count_time = None

    def stage(self, *args, **kwargs):
        super().stage(*args, **kwargs)
        if self._count_time is not None:
            self.stage_sigs[self._count_signal] = self._count_time

    def unstage(self, *args, **kwargs): 
        # try:
        super().unstage(*args, **kwargs)
        # finally:
        #    if self._count_signal in self.stage_sigs:
        #        del self.stage_sigs[self._count_signal]
        #        self._count_time = None

    def trigger(self, *args, **kwargs):
        "Trigger one acquisition."
        if self._staged != Staged.yes:
            raise RuntimeError("This detector is not ready to trigger."
                               "Call the stage() method before triggering.")

        self._status = DeviceStatus(self)
        self._acquisition_signal.put(1, callback=self._acquisition_done)
        return self._status

    def _acquisition_done(self, **kwargs):
        '''pyepics callback for when put completion finishes'''
        print(f'!!! status: {self._status}')
        if self._status is not None:
            self._status._finished()
            self._status = None

    @property
    def count_time(self):
        '''Exposure time, as set by bluesky'''
        return self._count_time

    @count_time.setter
    def count_time(self, count_time):
        self._count_time = count_time


class SMIAmptek(AmptekSoftTrigger, Amptek):
    def __init__(self, prefix, *, read_attrs=None, configuration_attrs=None,
                 **kwargs):
        if read_attrs is None:
            read_attrs = ['mca.spectrum']

        if configuration_attrs is None:
            configuration_attrs = ['mca.preset_real_time',
                                   'mca.preset_live_time',
                                   ]

        super().__init__(prefix, read_attrs=read_attrs,
                         configuration_attrs=configuration_attrs, **kwargs)

amptek = SMIAmptek("XF:12IDC-ES:2{Det-Amptek:1}", name="amptek")



